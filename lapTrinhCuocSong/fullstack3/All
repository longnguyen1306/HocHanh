1./ Framework Laravel
	- bộ code có sẵn
	- theo mô hình chuẩn ( MVC )
	- tích hợp sẵn vuejs ( laravel ui )

2./ Composer
	- Packet manage ( phần mềm quản lý gói )
	- Cài gói mới: 
		composer require vender/Package_name
	- Remove gói 
		composer require vender/Package_name

	- vender: chứa code của những thu viện đã cài
	- composer.json : file config chứa toàn bộ các gói thư viện đã cài đặt  
	- composer.lock : file khóa version các gói thư viện lúc cài 
	- composer update: cài đặt và cập nhật file composer.lock
	- composer create project vendor/package_name thu_muc

3./ Cài đặt laravel
	- composer create project larave/laravel [tên tư mục] 

	- chạy server 
		=> php artisan serve

	* Cấu truc thư mục của laravel
		- app: chứa controller, model ...
			- Http: 
				- Controllers: chứa các controller 
		- bootstrap: chứa các file khởi động, cache
		- config: chứa các file cấu hình 
		- database: 
			- migration: chứa các file migration 
		- public: chứa các file đã được build
		- resources: 
			- các file js
			- css
			- views: file hiên thị 
		- route: chứa các route 
		- storage: chứa các file cache
			+ log: log lỗi ra
		- test: chứa các unit test 
		- vendor: chứa các thư viện
		- .env: enviroment -> biến môi trường

	* artisan:
		- là một công cụ của laravel và được viết bằng php
		- make: 
			+ controller: tạo controller 
				=> php artisan make:controller [ten_controller]
			+ model: tạo model
				=> php artisan make:model [ten_model]
				- tạo luôn migration
					=> php artisan make:model [ten_model] -m

		- config: 
			+ clear: xóa cache config 
				+ config ở file .env => dịch sang fiole php => chứa ở thư mục cache 
					=> php artisan config:clear 
					=> php artisan config:cache

			+ migration: các file php để thao tác với database
				=> php artisan make:migration creae_[tên_bảng]_table
				- các câu lẹnh với migration
					=> php artisan migrate : tạo bảng
					=> php artisan migrate:rollback : xóa bảng nếu tồn tại
					=> php artisan migrate:refresh : xóa bảng và migrate lại

				- Schema:
					+ bigIncrements: tự động tăng, kiểu big integer
					+ increment: tự động tăng, kiêu integer
					+ integer
					+ string: kiêu varchar
					+ text
					+ longText
					+ char
					+ date: ngày tháng
					+ dateTime: ngày giờ 
					+ double
					+ float: số thập phân
					+ timestamps: số giây từ 00:00 01/01/1970

	* Route:
		- get: Route::get('url', function-hoac-chuoi)
		- post
		- put
		- delete
		- options
		- path

		- đặt tên cho route:
			=> Route::get()->name('Ten_route')
		- Route với tham số
			+ cho vào dấu ngoặc nhọn {ten-tham-so}
				=> Route::get('/bai-viet{id}', 'BaiVietController@show')

	* Route Group
		=>  Route::group(['prefix' => '/bai-viet'], function() {
				//viết route trong này
			});

	* validate biết trong route
		=> Route::get('/bai-viet{id}', 'BaiVietController@show')
			-> name('baiviet')
			-> where('id' > '[0-9]+')

4./ Controller và Request
	+ Controller: 
		- là sân chơi cho các model tương tác với nhau
		- nơi nhận request
		- tạo controller:
			=> php artisan make:controller TenController
			+ tên controller chữ cái đầu viết hoa

	+ Request
		- là 1 object chứa toàn bộ thông tin người dùng gởi lên
		- nếu muốn dùng request thì phải cho vào tham số đầu tiên
		- $request->all() : tra về một mãng tất cả các tham số được gởi lên
		- $request->only('chuoi hoặc mãng') : lọc request
			+ nếu là chuổi: trả về mãng có 1 tham số
			+ nếu là mãng: trả về mãng có các tham số 
		- $request->except('chuoi hoặc mãng') : loại trừ 
		- $request->has('tham-so'): nếu có -> true nếu không -> false
		- $request->input('title') = $request->title

		- tạo request riêng:
			=> php artisan make:request TenRequest

	+ Response
		- cách response của laravel: return của hàm ở controller
		- return một view
			=> return view('ten-file-view')
		- return một view kèm data
			=> return view('ten-file-view', ['data' => $data])
		- return về trang trước đó 
			=> return back();
		- return về trang trước đó kèm data
			=> return back()->with(['data', $data]);
			=> return back()->withInput();
		- trả về dạng json
			=> return response()->json('gia-tri');
		- chuyển trang: ( object )
			=> return redirect()->route('route-name')
		- chuyển trang ra ngoài: ( object )
			=> return redirect()->away('url')

5./ Fillable
	=>    protected $fillable = [
		        'name', 'email', 'password',
		    ];
	
6./ Eloquent
	- ORM: object relation mapping
	- để 1 model lưu được dữ liệu xuống db: định nghĩa các field dưới db
	- Create(array) : tạo ra 1 object model và lưu xuống db
		+ model chỉ nhận các property được liệt kê trong biến fillable
	- Khởi tạo bằng từ khóa new
		=> new ModelName($attributes)

	- find(): lấy 1 model từ db
		=> find(tham-so): lấy model từ db -> trả về 1 object
		=> find(array): lấy ra một tập hợp các object
	- findOrFail(): giống như find() nhưng báo lỗi thân thiện khi không tìm thấy
	- all(); trả về tất cả
	- paginate(); phân trang
	- where('key', 'value'): tìm kiếm theo điều kiện
	- get(); fetch hết kết quả ra 
	- not(); không phải
	- counts(); đếm số lượng record
	- max()
	- min()
	- limit()
	- take(): giống limit()
	+ Model chỉ đọc được db khi gặp hàm all(), paginate, find, findOrFail, counts
	- orderBy(field, asc/desc)
	- update()
	- updateOrCreate()
	- updateOrNew(): giống updateOrCreate()
	- firstOrCreate()
	- firstOrNew()
	- delete()
	- softDelete(); xóa mềm dữ liệu thực sẽ không mất
		+ khai báo migration
			=> $table->softDeletes()
		+ Model
			=> use Illuminate\Database\Eloquent\SoftDeletes;
		+ Model class
			=> use SoftDeletes; //trait

		+ withTrashed(); lấy luôn những record đã xóa
		+ onlyTrashed(); chỉ lấy những record đã xóa

7./ CRUD ( Create, Read, Update, Delete )

	- csrf_field
	- Token: là 1 chuổi xác minh -> chuỗi khó đoán

8./ Seeder: 
	- bộ tạo dữ liệu ảo
	- faker;
		=> composer require fzaninotto/faker
		+ doc: https://github.com/fzaninotto/Faker
	- tạo seeder
		=> php artisan make:seeder TenSeeder

	- Dump-autoload
		=> composer dump-autoload


9./ Blade Template
	- Tất cả các fil view có đuôi *.blade.php
	- cấu trúc extends( master layout => child layout)
	- @yield('content')
	- @extends('layouts.master'): kế thừa giao diện chính
	- @section('content'); định nghĩa content
	- @endsection; kết thúc phần section trên

	* hiển thị dữ liệu
		- {{ biến }} : thay thế echo
		- @foreach - @endforeach() : vòng lặp foreach
		- @for - @endfor

10./ Relationship
	- Quan hệ giữa các model
	- Quan hện 1 -n
		+ $this->hasMany('ten_class'): có nhiều (n)
		+ $this->belongTo('ten_class'): phụ thuộc vào (1)

	- Quan hệ 1 - 1
		$this->belongTo('ten_class'): phụ thuộc (1)
		$this->belongTo('ten_class'): phụ thuộc (1)

	- Quan hệ n - n
		$this->belongToMany('ten_class'): đặt ở 2 model có quan hệ nhiều - nhiều

11./ Gói UI của larvel ( user interface )
	-https://laravel.com/docs/7.x/frontend

